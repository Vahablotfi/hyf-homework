-- Part 1: Working with tasks

-- Add a task with these attributes: 
-- title, description, created, updated, due_date, status_id, user_id
USE hyf_lesson1;
 INSERT INTO task (title, description, created, updated, due_date, status_id, user_id)
VALUES('Do the recycling','trash must be sorted and go to recycling','2017-10-15','2017-10-25','2100-10-10','2','11');

-- Change the title of a task
	UPDATE task 
    SET title = 'Buy Drinks for the company party'
    WHERE id = 20;

-- Change a task due date
	UPDATE task 
    SET due_date = '2025-8-20'
    WHERE id = 35;

-- Change a task status

	UPDATE task 
    SET status_id = 3
    WHERE status_id != 3
    LIMIT 1;
-- Mark a task as complete
	
    	UPDATE task 
    SET status_id = 
    (SELECT id
FROM status
WHERE status.name='Done')
    WHERE status_id != 
    (SELECT id
FROM status
WHERE status.name='Done')
    LIMIT 1;



-- Delete a task
   DELETE FROM task 
 WHERE id = 47 ;
  
  Select *
    FROM task;
-- I added some task, but  I had to delet them , and after that 
--  whatever task I made got an id which was right after the 
--deleted tasks id (you can see the id after 35 is 46 , 
--instead of 36,because I deleted ten task), 
--I couldn't find a way to fix that ,
-- I would appreciate a guide for that issue.




-- Part 2: School database
-- Create a new database containing the following tables:
 CREATE DATABASE School_DB;

-- Class: with the columns: id, name, begins (date), ends (date)
 CREATE TABLE `Class`(
  `id`int(10) unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `name`varchar(255) NOT NULL,
  `begins` DATE NOT NULL,
  `ends` DATE NOT NULL 
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 
 
 -- Classes
   INSERT INTO Class(name,begins,ends)
    VALUES ('math','2018-8-15','2019-6-10'),
         ('Algebra','2018-8-15','2019-6-5'),
         ('Hictory', '2018-8-20','2018-12-10'),
         ('Danish','2018-8-17','2019-6-20');

     
 
-- Student: with the columns: id, name, email, phone, class_id (foreign key)
 CREATE TABLE `Student`(
 `id` int(10) unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,
 `name` VARCHAR(50) NOT NULL,
 `email` VARCHAR(50),
 `phone` int(15) NOT NULL,
 `class_id` int (10) unsigned NOT NULL ,
  CONSTRAINT `fk_class` FOREIGN KEY (`class_id`) REFERENCES `Class` (`id`) ON DELETE  CASCADE ON UPDATE CASCADE
 )ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 
 
 INSERT INTO Student(name,email,phone,class_id)
VALUES('VAHAB','vahab@gmail.com',45454545,4 ),
      ('Anas','Anas@gmail.com',45454545,3),
      ('Suman','Suman@gmail,com',45454545,1);

-- If you are done with the above tasks, you can continue with these advanced tasks:
-- Create an index on the name column of the student table.
-- Add a new column to the class table named status which can only have the following values: not-started, ongoing, finished (hint: enumerations).

USE School_DB;
ALTER TABLE Class
ADD COLUMN  status ENUM('not-started', 'ongoing', 'finished');



-- Part 3: More queries



-- You should do these queries on the database hyf_lesson2
-- Get all the tasks assigned to users whose email ends in @spotify.com
USE hyf_lesson2;
SELECT 
   u.id AS user_id,
   u.name,
   u.email,
   t.id AS task_id,
   t.title AS task_title
FROM user u
JOIN user_task  ut ON u.id=ut.user_id
JOIN task t ON t.id = ut.task_id
 WHERE u.email LIKE '%@spotify.com';



-- Get all the tasks for 'Donald Duck' with status 'Not started'
SELECT 
t.title AS task_title,
t.status_id AS task_status,
s.name AS status_name,
u.name AS user_name
FROM task t
JOIN user_task ut ON t.id = ut.task_id
JOIN user u ON u.id = ut.user_id
JOIN status s ON t.status_id =s.id 
WHERE u.name = 'Donald Duck' AND s.name = 'Not started';

-- alternatively I used subqueries in my WHERE clause and it looked like the codes below

SELECT 
t.title AS task_title,
t.status_id AS task_status,
u.name AS user_name
FROM task t
JOIN user_task ut ON t.id = ut.task_id
JOIN user u ON u.id = ut.user_id
 WHERE u.name='Donald Duck' AND t.status_id =(
SELECT id
FROM status
WHERE name = 'Not started');

-- Get all the tasks for 'Maryrose Meadows' that were created in september (hint: month(created)=month_number)

SELECT
t.title,
t.created,
u.name
FROM task t
JOIN user_task ut ON t.id =ut.task_id
JOIN user u ON u.id=ut.user_id
 WHERE u.name='Maryrose Meadows' AND month(created)=9;

-- Find how many tasks where created in each month, 

SELECT COUNT(created) AS task_number ,month(created) AS creation_Month
FROM task
  GROUP BY month(created)
 ORDER BY COUNT(created);

 -- Part 4: Creating a database

 CREATE DATABASE Fitness_DB;
-- For this part , I used a sport club which provides different 
-- classes and different trainers.


CREATE TABLE `fitness_class` (
  `id` integer(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `class_name` varchar(255) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `trainers` (
  `id` integer(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `name` varchar(255) NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

INSERT INTO trainers(name)
VALUES ('Anas'),
       ('Faheem');
INSERT INTO fitness_class(class_name)
      VALUES('Yoga'),
            ('Beginner Fitness'),
            ('Senior Fitness'),
            ('cross fit'),
            ('Open gym'),
            ('Pilates');


CREATE TABLE `class_trainers` (
  -- `id` integer UNSIGNED AUTO_INCREMENT NOT NULL ,
  `trainer_id` integer(10) UNSIGNED  NOT NULL  ,
  `class_id` integer(10) UNSIGNED  NOT NULL  ,
  PRIMARY KEY(`trainer_id`,`class_id`)
);


ALTER TABLE `class_trainers` ADD FOREIGN KEY (`class_id`) REFERENCES `fitness_class` (`id`);

ALTER TABLE `class_trainers` ADD FOREIGN KEY (`trainer_id`) REFERENCES `trainers` (`id`);
 INSERT INTO class_trainers (trainer_id,class_id)
        VALUES(1,1),
              (1,2),
              (1,3),
              (1,5),
              (2,5),
              (2,2),
              (2,3),
              (2,4),
              (2,6);